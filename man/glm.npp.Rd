% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/glm_npp.R
\name{glm.npp}
\alias{glm.npp}
\title{Posterior of normalized power prior}
\usage{
glm.npp(
  formula,
  family,
  data.list,
  a0.lognc,
  lognc,
  offset.list = NULL,
  beta.mean = NULL,
  beta.sd = NULL,
  disp.mean = NULL,
  disp.sd = NULL,
  a0.shape1 = 1,
  a0.shape2 = 1,
  a0.lower = NULL,
  a0.upper = NULL,
  iter_warmup = 1000,
  iter_sampling = 1000,
  chains = 4,
  ...
)
}
\arguments{
\item{formula}{a two-sided formula giving the relationship between the response variable and covariates.}

\item{family}{an object of class \code{family}. See \code{\link[stats:family]{?stats::family}}.}

\item{data.list}{a list of \code{data.frame}s. The first element in the list is the current data, and the rest
are the historical datasets.}

\item{a0.lognc}{a vector giving values of the power prior parameter for which the logarithm of the normalizing
constant has been evaluated}

\item{lognc}{an S by T matrix where S is the length of a0.lognc, T is the number of historical datasets, and
the j-th column, j = 1, ..., T, is a vector giving the logarithm of the normalizing constant (as
estimated by \code{\link[hdbayes]{glm.npp.lognc}}) for a0.lognc using the j-th historical dataset.}

\item{offset.list}{a list of vectors giving the offsets for each data. The length of offset.list is equal to
the length of data.list. The length of each element of offset.list is equal to the number
of rows in the corresponding element of data.list. Defaults to a list of vectors of 0s.}

\item{beta.mean}{a scalar or a vector whose dimension is equal to the number of regression coefficients giving
the mean parameters for the initial prior on regression coefficients. If a scalar is provided,
beta.mean will be a vector of repeated elements of the given scalar. Defaults to a vector of 0s.}

\item{beta.sd}{a scalar or a vector whose dimension is equal to the number of regression coefficients giving
the sd parameters for the initial prior on regression coefficients. If a scalar is provided,
same as for beta.mean. Defaults to a vector of 10s.}

\item{disp.mean}{mean parameter for the half-normal prior on dispersion parameter. Defaults to 0.}

\item{disp.sd}{sd parameter for the half-normal prior on dispersion parameter. Defaults to 10.}

\item{a0.shape1}{first shape parameter for the i.i.d. beta prior on a0 vector. When \code{a0.shape1 == 1} and
\code{a0.shape2 == 1}, a uniform prior is used.}

\item{a0.shape2}{second shape parameter for the i.i.d. beta prior on a0 vector. When \code{a0.shape1 == 1} and
\code{a0.shape2 == 1}, a uniform prior is used.}

\item{a0.lower}{a scalar or a vector whose dimension is equal to the number of historical datasets giving the
lower bounds for each element of the a0 vector. If a scalar is provided, a0.lower will be a
vector of repeated elements of the given scalar. Defaults to a vector of 0s.}

\item{a0.upper}{a scalar or a vector whose dimension is equal to the number of historical datasets giving the
upper bounds for each element of the a0 vector. If a scalar is provided, same as for a0.lower.
Defaults to a vector of 1s.}

\item{iter_warmup}{number of warmup iterations to run per chain. Defaults to 1000. See the argument \code{iter_warmup} in
\code{\link[cmdstanr:model-method-sample]{cmdstanr::sample()}}.}

\item{iter_sampling}{number of post-warmup iterations to run per chain. Defaults to 1000. See the argument \code{iter_sampling}
in \code{\link[cmdstanr:model-method-sample]{cmdstanr::sample()}}.}

\item{chains}{number of Markov chains to run. Defaults to 4. See the argument \code{chains} in \code{\link[cmdstanr:model-method-sample]{cmdstanr::sample()}}.}

\item{...}{arguments passed to \code{\link[cmdstanr:model-method-sample]{cmdstanr::sample()}} (e.g. seed, refresh, init).}
}
\value{
\if{html}{\out{<div class="sourceCode">}}\preformatted{             an object of class `draws_df` giving posterior samples
}\if{html}{\out{</div>}}
}
\description{
Sample from the posterior distribution of a GLM using the normalized power prior
(NPP). Before using this function, users must estimate the logarithm of the
normalizing constant across a range of power prior parameters (a0), possibly
smoothing techniques over a find grid.
}
\examples{
\dontrun{
  data(actg019)
  data(actg036)
  library(parallel)
  ncores = 5

  data.list = list(data = actg019, histdata = actg036)
  formula   = cd4 ~ treatment + age + race
  family    = poisson()
  a0        = seq(0, 1, length.out = 100)
  a0.lognc  = list()
  a0.lognc.hdbayes = data.frame( a0 = a0 )
  if (instantiate::stan_cmdstan_exists()) {
    ## call created function
    for (i in 2:length(data.list)) {
      histdata = data.list[[i]]
      ## wrapper to obtain log normalizing constant in parallel package
      logncfun = function(a0, ...){
        glm.npp.lognc(
          formula = formula, family = family, a0 = a0, histdata = histdata,
          ...
        )
      }

      cl = makeCluster(ncores)
      clusterSetRNGStream(cl, 123)
      clusterExport(cl, varlist = c('formula', 'family', 'histdata', 'glm.npp.lognc',
                                    'glm_lp', 'get_lp2mean', 'normal_glm_lp', 'bernoulli_glm_lp',
                                    'poisson_glm_lp', 'gamma_glm_lp', 'invgauss_glm_lp'))
      a0.lognc[[i-1]] = parLapply(
        cl = cl, X = a0, fun = logncfun, iter_warmup = 2000,
        iter_sampling = 5000, chains = 1, refresh = 0
      )
      stopCluster(cl)
      a0.lognc[[i-1]] = data.frame( do.call(rbind, a0.lognc[[i-1]]) )
      a0.lognc.hdbayes = cbind(a0.lognc.hdbayes, a0.lognc[[i-1]]$lognc)
      colnames(a0.lognc.hdbayes)[i] = paste0("lognc_hist", i-1)
    }
    a0.lognc = a0.lognc.hdbayes$a0
    lognc    = as.matrix(a0.lognc.hdbayes[, -1, drop = F])

    ## sample from normalized power prior
    glm.npp(
      formula = cd4 ~ treatment + age + race,
      family = poisson(),
      data.list = data.list,
      a0.lognc = a0.lognc,
      lognc = lognc,
      chains = 1, iter_warmup = 500, iter_sampling = 1000,
      refresh = 0
    )
  }
}
}
