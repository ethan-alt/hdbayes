% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/glm_commensurate.R
\name{glm.commensurate}
\alias{glm.commensurate}
\title{Commensurate prior}
\usage{
glm.commensurate(
  formula,
  family,
  data.list,
  tau,
  offset.list = NULL,
  beta0.mean = NULL,
  beta0.sd = NULL,
  disp.mean = NULL,
  disp.sd = NULL,
  iter_warmup = 1000,
  iter_sampling = 1000,
  chains = 4,
  ...
)
}
\arguments{
\item{formula}{a two-sided formula giving the relationship between the response variable and covariates}

\item{family}{an object of class \code{family}. See \code{\link[stats:family]{?stats::family}}}

\item{data.list}{a list of \code{data.frame}s. The first element in the list is the current data, and the rest
are the historical datasets.}

\item{tau}{a scalar or a vector whose dimension is equal to the number of regression coefficients giving
the commensurate prior parameters. If a scalar is provided, tau will be a vector of repeated
elements of the given scalar. Each element of tau must be positive, corresponding to a normal
precision parameter.}

\item{offset.list}{a list of vectors giving the offsets for each data. The length of offset.list is equal to
the length of data.list. The length of each element of offset.list is equal to the number
of rows in the corresponding element of data.list. Defaults to a list of vectors of 0s.}

\item{beta0.mean}{a scalar or a vector whose dimension is equal to the number of regression coefficients
giving the mean parameters for the initial prior on regression coefficients. If a scalar
is provided, same as for tau. Defaults to a vector of 0s.}

\item{beta0.sd}{a scalar or a vector whose dimension is equal to the number of regression coefficients giving
the sd parameters for the initial prior on regression coefficients. If a scalar is provided,
same as for tau. Defaults to a vector of 10s.}

\item{disp.mean}{a scalar or a vector whose dimension is equal to the number of datasets (including the current
data) giving the means for the half-normal hyperpriors on the dispersion parameters. If a
scalar is provided, same as for tau. Defaults to a vector of 0s.}

\item{disp.sd}{a scalar or a vector whose dimension is equal to the number of datasets (including the current
data) giving the sds for the half-normal hyperpriors on the dispersion parameters. If a scalar
is provided, same as for tau. Defaults to a vector of 10s.}

\item{iter_warmup}{number of warmup iterations to run per chain. Defaults to 1000. See the argument \code{iter_warmup} in
\code{\link[cmdstanr:model-method-sample]{cmdstanr::sample()}}.}

\item{iter_sampling}{number of post-warmup iterations to run per chain. Defaults to 1000. See the argument \code{iter_sampling}
in \code{\link[cmdstanr:model-method-sample]{cmdstanr::sample()}}.}

\item{chains}{number of Markov chains to run. Defaults to 4. See the argument \code{chains} in \code{\link[cmdstanr:model-method-sample]{cmdstanr::sample()}}.}

\item{...}{arguments passed to \code{\link[cmdstanr:model-method-sample]{cmdstanr::sample()}} (e.g. seed, refresh, init).}
}
\value{
\if{html}{\out{<div class="sourceCode">}}\preformatted{             an object of class `draws_df` giving posterior samples
}\if{html}{\out{</div>}}
}
\description{
Sample from the posterior distribution of a GLM using the Commensurate
prior of Hobbs et al. This prior assumes that the regression coefficients
for the current data set conditional on those for the historical data set are
multivariate normal with mean equal to the regression coefficients of the historical data
and covariance equal to the inverse of a user-specified precision parameter (tau).
Dispersion parameters (if applicable) between the
current and historical data sets are treated as independent.
}
\examples{
if (instantiate::stan_cmdstan_exists()) {
  data(actg019)
  data(actg036)
  ## take subset for speed purposes
  actg019 = actg019[1:100, ]
  actg036 = actg036[1:50, ]
  data_list = list(currdata = actg019, histdata = actg036)
  glm.commensurate(
    formula = cd4 ~ treatment + age + race,
    family = poisson(), data.list = data_list,
    tau = rep(5, 4),    ## 4 parameters including intercept
    chains = 1, iter_warmup = 500, iter_sampling = 1000
  )
}
}
