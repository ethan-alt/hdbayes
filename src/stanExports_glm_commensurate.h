// Generated by rstantools.  Do not edit by hand.

/*
    hdbayes is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    hdbayes is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with hdbayes.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_glm_commensurate_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_glm_commensurate");
    reader.add_event(1, 1, "include", "include/expfam_loglik.stan");
    reader.add_event(1, 0, "start", "include/expfam_loglik.stan");
    reader.add_event(39, 38, "end", "include/expfam_loglik.stan");
    reader.add_event(39, 2, "restart", "model_glm_commensurate");
    reader.add_event(85, 46, "end", "model_glm_commensurate");
    return reader;
}
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T6__, typename T_lp__, typename T_lp_accum__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T6__, T_lp__>::type>::type
glm_lp(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& y,
           const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& beta,
           const T2__& phi,
           const Eigen::Matrix<T3__, Eigen::Dynamic, Eigen::Dynamic>& X,
           const int& dist,
           const int& link,
           const Eigen::Matrix<T6__, Eigen::Dynamic, 1>& offset, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T6__, T_lp__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 3;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,rows(y));
        current_statement_begin__ = 4;
        local_scalar_t__ tau(DUMMY_VAR__);
        (void) tau;  // dummy to suppress unused var warning
        stan::math::initialize(tau, DUMMY_VAR__);
        stan::math::fill(tau, DUMMY_VAR__);
        stan::math::assign(tau,inv(phi));
        current_statement_begin__ = 5;
        validate_non_negative_index("eta", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> eta(n);
        stan::math::initialize(eta, DUMMY_VAR__);
        stan::math::fill(eta, DUMMY_VAR__);
        stan::math::assign(eta,add(multiply(X, beta), offset));
        current_statement_begin__ = 6;
        validate_non_negative_index("mu", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu(n);
        stan::math::initialize(mu, DUMMY_VAR__);
        stan::math::fill(mu, DUMMY_VAR__);
        current_statement_begin__ = 7;
        if (as_bool(logical_eq(link, 1))) {
            current_statement_begin__ = 7;
            stan::math::assign(mu, eta);
        } else if (as_bool(logical_eq(link, 2))) {
            current_statement_begin__ = 8;
            stan::math::assign(mu, stan::math::exp(eta));
        } else if (as_bool(logical_eq(link, 3))) {
            current_statement_begin__ = 9;
            stan::math::assign(mu, inv_logit(eta));
        } else if (as_bool(logical_eq(link, 4))) {
            current_statement_begin__ = 10;
            stan::math::assign(mu, inv(eta));
        } else if (as_bool(logical_eq(link, 5))) {
            current_statement_begin__ = 11;
            stan::math::assign(mu, Phi_approx(eta));
        } else if (as_bool(logical_eq(link, 6))) {
            current_statement_begin__ = 12;
            stan::math::assign(mu, add(divide(stan::math::atan(eta), stan::math::pi()), 0.5));
        } else if (as_bool(logical_eq(link, 7))) {
            current_statement_begin__ = 13;
            stan::math::assign(mu, inv_cloglog(eta));
        } else if (as_bool(logical_eq(link, 8))) {
            current_statement_begin__ = 14;
            stan::math::assign(mu, square(eta));
        } else if (as_bool(logical_eq(link, 9))) {
            current_statement_begin__ = 15;
            stan::math::assign(mu, inv(stan::math::sqrt(eta)));
        } else {
            current_statement_begin__ = 16;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Link not supported";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 18;
        if (as_bool(logical_eq(dist, 1))) {
            current_statement_begin__ = 19;
            return stan::math::promote_scalar<fun_return_scalar_t__>((dot_product(y, stan::math::log(mu)) + dot_product(subtract(1, y), stan::math::log(subtract(1, mu)))));
        } else if (as_bool(logical_eq(dist, 2))) {
            current_statement_begin__ = 22;
            return stan::math::promote_scalar<fun_return_scalar_t__>((dot_product(y, stan::math::log(mu)) - sum(add(mu, stan::math::lgamma(add(y, 1))))));
        } else if (as_bool(logical_eq(dist, 3))) {
            current_statement_begin__ = 25;
            return stan::math::promote_scalar<fun_return_scalar_t__>(normal_log(y, mu, stan::math::sqrt(phi)));
        } else if (as_bool(logical_eq(dist, 4))) {
            current_statement_begin__ = 28;
            return stan::math::promote_scalar<fun_return_scalar_t__>(gamma_log(y, tau, multiply(tau, mu)));
        } else if (as_bool(logical_eq(dist, 5))) {
            current_statement_begin__ = 31;
            return stan::math::promote_scalar<fun_return_scalar_t__>((0.5 * (((n * (stan::math::log(tau) - 1.8378770664)) - (3 * sum(stan::math::log(y)))) - (tau * dot_self(elt_multiply(subtract(elt_multiply(y, inv(mu)), 1), inv_sqrt(y)))))));
        } else {
            current_statement_begin__ = 37;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Distribution not supported";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 38;
        return stan::math::promote_scalar<fun_return_scalar_t__>(0);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct glm_lp_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T6__, typename T_lp__, typename T_lp_accum__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T6__, T_lp__>::type>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& y,
           const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& beta,
           const T2__& phi,
           const Eigen::Matrix<T3__, Eigen::Dynamic, Eigen::Dynamic>& X,
           const int& dist,
           const int& link,
           const Eigen::Matrix<T6__, Eigen::Dynamic, 1>& offset, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) const {
        return glm_lp(y, beta, phi, X, dist, link, offset, lp__, lp_accum__, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_glm_commensurate
  : public stan::model::model_base_crtp<model_glm_commensurate> {
private:
        int n;
        int n0;
        int p;
        vector_d y;
        matrix_d X;
        vector_d y0;
        matrix_d X0;
        vector_d beta0_mean;
        matrix_d beta0_cov;
        double disp_shape;
        double disp_scale;
        double disp0_shape;
        double disp0_scale;
        vector_d tau;
        int dist;
        int link;
        vector_d offset;
        vector_d offset0;
        vector_d comm_sd;
public:
    model_glm_commensurate(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_glm_commensurate(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_glm_commensurate_namespace::model_glm_commensurate";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 42;
            context__.validate_dims("data initialization", "n", "int", context__.to_vec());
            n = int(0);
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            n = vals_i__[pos__++];
            check_greater_or_equal(function__, "n", n, 0);
            current_statement_begin__ = 43;
            context__.validate_dims("data initialization", "n0", "int", context__.to_vec());
            n0 = int(0);
            vals_i__ = context__.vals_i("n0");
            pos__ = 0;
            n0 = vals_i__[pos__++];
            check_greater_or_equal(function__, "n0", n0, 0);
            current_statement_begin__ = 44;
            context__.validate_dims("data initialization", "p", "int", context__.to_vec());
            p = int(0);
            vals_i__ = context__.vals_i("p");
            pos__ = 0;
            p = vals_i__[pos__++];
            check_greater_or_equal(function__, "p", p, 0);
            current_statement_begin__ = 45;
            validate_non_negative_index("y", "n", n);
            context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec(n));
            y = Eigen::Matrix<double, Eigen::Dynamic, 1>(n);
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < y_j_1_max__; ++j_1__) {
                y(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 46;
            validate_non_negative_index("X", "n", n);
            validate_non_negative_index("X", "p", p);
            context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(n,p));
            X = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n, p);
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_j_2_max__ = p;
            size_t X_j_1_max__ = n;
            for (size_t j_2__ = 0; j_2__ < X_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                    X(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 47;
            validate_non_negative_index("y0", "n0", n0);
            context__.validate_dims("data initialization", "y0", "vector_d", context__.to_vec(n0));
            y0 = Eigen::Matrix<double, Eigen::Dynamic, 1>(n0);
            vals_r__ = context__.vals_r("y0");
            pos__ = 0;
            size_t y0_j_1_max__ = n0;
            for (size_t j_1__ = 0; j_1__ < y0_j_1_max__; ++j_1__) {
                y0(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 48;
            validate_non_negative_index("X0", "n0", n0);
            validate_non_negative_index("X0", "p", p);
            context__.validate_dims("data initialization", "X0", "matrix_d", context__.to_vec(n0,p));
            X0 = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n0, p);
            vals_r__ = context__.vals_r("X0");
            pos__ = 0;
            size_t X0_j_2_max__ = p;
            size_t X0_j_1_max__ = n0;
            for (size_t j_2__ = 0; j_2__ < X0_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X0_j_1_max__; ++j_1__) {
                    X0(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 49;
            validate_non_negative_index("beta0_mean", "p", p);
            context__.validate_dims("data initialization", "beta0_mean", "vector_d", context__.to_vec(p));
            beta0_mean = Eigen::Matrix<double, Eigen::Dynamic, 1>(p);
            vals_r__ = context__.vals_r("beta0_mean");
            pos__ = 0;
            size_t beta0_mean_j_1_max__ = p;
            for (size_t j_1__ = 0; j_1__ < beta0_mean_j_1_max__; ++j_1__) {
                beta0_mean(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 50;
            validate_non_negative_index("beta0_cov", "p", p);
            validate_non_negative_index("beta0_cov", "p", p);
            context__.validate_dims("data initialization", "beta0_cov", "matrix_d", context__.to_vec(p,p));
            beta0_cov = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(p, p);
            vals_r__ = context__.vals_r("beta0_cov");
            pos__ = 0;
            size_t beta0_cov_j_2_max__ = p;
            size_t beta0_cov_j_1_max__ = p;
            for (size_t j_2__ = 0; j_2__ < beta0_cov_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < beta0_cov_j_1_max__; ++j_1__) {
                    beta0_cov(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 51;
            context__.validate_dims("data initialization", "disp_shape", "double", context__.to_vec());
            disp_shape = double(0);
            vals_r__ = context__.vals_r("disp_shape");
            pos__ = 0;
            disp_shape = vals_r__[pos__++];
            check_greater_or_equal(function__, "disp_shape", disp_shape, 0);
            current_statement_begin__ = 52;
            context__.validate_dims("data initialization", "disp_scale", "double", context__.to_vec());
            disp_scale = double(0);
            vals_r__ = context__.vals_r("disp_scale");
            pos__ = 0;
            disp_scale = vals_r__[pos__++];
            check_greater_or_equal(function__, "disp_scale", disp_scale, 0);
            current_statement_begin__ = 53;
            context__.validate_dims("data initialization", "disp0_shape", "double", context__.to_vec());
            disp0_shape = double(0);
            vals_r__ = context__.vals_r("disp0_shape");
            pos__ = 0;
            disp0_shape = vals_r__[pos__++];
            check_greater_or_equal(function__, "disp0_shape", disp0_shape, 0);
            current_statement_begin__ = 54;
            context__.validate_dims("data initialization", "disp0_scale", "double", context__.to_vec());
            disp0_scale = double(0);
            vals_r__ = context__.vals_r("disp0_scale");
            pos__ = 0;
            disp0_scale = vals_r__[pos__++];
            check_greater_or_equal(function__, "disp0_scale", disp0_scale, 0);
            current_statement_begin__ = 55;
            validate_non_negative_index("tau", "p", p);
            context__.validate_dims("data initialization", "tau", "vector_d", context__.to_vec(p));
            tau = Eigen::Matrix<double, Eigen::Dynamic, 1>(p);
            vals_r__ = context__.vals_r("tau");
            pos__ = 0;
            size_t tau_j_1_max__ = p;
            for (size_t j_1__ = 0; j_1__ < tau_j_1_max__; ++j_1__) {
                tau(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "tau", tau, 0);
            current_statement_begin__ = 56;
            context__.validate_dims("data initialization", "dist", "int", context__.to_vec());
            dist = int(0);
            vals_i__ = context__.vals_i("dist");
            pos__ = 0;
            dist = vals_i__[pos__++];
            check_greater_or_equal(function__, "dist", dist, 1);
            check_less_or_equal(function__, "dist", dist, 5);
            current_statement_begin__ = 57;
            context__.validate_dims("data initialization", "link", "int", context__.to_vec());
            link = int(0);
            vals_i__ = context__.vals_i("link");
            pos__ = 0;
            link = vals_i__[pos__++];
            check_greater_or_equal(function__, "link", link, 1);
            check_less_or_equal(function__, "link", link, 9);
            current_statement_begin__ = 58;
            validate_non_negative_index("offset", "n", n);
            context__.validate_dims("data initialization", "offset", "vector_d", context__.to_vec(n));
            offset = Eigen::Matrix<double, Eigen::Dynamic, 1>(n);
            vals_r__ = context__.vals_r("offset");
            pos__ = 0;
            size_t offset_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < offset_j_1_max__; ++j_1__) {
                offset(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 59;
            validate_non_negative_index("offset0", "n0", n0);
            context__.validate_dims("data initialization", "offset0", "vector_d", context__.to_vec(n0));
            offset0 = Eigen::Matrix<double, Eigen::Dynamic, 1>(n0);
            vals_r__ = context__.vals_r("offset0");
            pos__ = 0;
            size_t offset0_j_1_max__ = n0;
            for (size_t j_1__ = 0; j_1__ < offset0_j_1_max__; ++j_1__) {
                offset0(j_1__) = vals_r__[pos__++];
            }
            // initialize transformed data variables
            current_statement_begin__ = 62;
            validate_non_negative_index("comm_sd", "p", p);
            comm_sd = Eigen::Matrix<double, Eigen::Dynamic, 1>(p);
            stan::math::fill(comm_sd, DUMMY_VAR__);
            stan::math::assign(comm_sd,inv_sqrt(tau));
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 65;
            validate_non_negative_index("beta", "p", p);
            num_params_r__ += p;
            current_statement_begin__ = 66;
            validate_non_negative_index("dispersion", "(logical_gt(dist, 2) ? 1 : 0 )", (logical_gt(dist, 2) ? 1 : 0 ));
            num_params_r__ += (1 * (logical_gt(dist, 2) ? 1 : 0 ));
            current_statement_begin__ = 67;
            validate_non_negative_index("beta0", "p", p);
            num_params_r__ += p;
            current_statement_begin__ = 68;
            validate_non_negative_index("dispersion0", "(logical_gt(dist, 2) ? 1 : 0 )", (logical_gt(dist, 2) ? 1 : 0 ));
            num_params_r__ += (1 * (logical_gt(dist, 2) ? 1 : 0 ));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_glm_commensurate() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 65;
        if (!(context__.contains_r("beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "p", p);
        context__.validate_dims("parameter initialization", "beta", "vector_d", context__.to_vec(p));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta(p);
        size_t beta_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            beta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 66;
        if (!(context__.contains_r("dispersion")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable dispersion missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("dispersion");
        pos__ = 0U;
        validate_non_negative_index("dispersion", "(logical_gt(dist, 2) ? 1 : 0 )", (logical_gt(dist, 2) ? 1 : 0 ));
        context__.validate_dims("parameter initialization", "dispersion", "double", context__.to_vec((logical_gt(dist, 2) ? 1 : 0 )));
        std::vector<double> dispersion((logical_gt(dist, 2) ? 1 : 0 ), double(0));
        size_t dispersion_k_0_max__ = (logical_gt(dist, 2) ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < dispersion_k_0_max__; ++k_0__) {
            dispersion[k_0__] = vals_r__[pos__++];
        }
        size_t dispersion_i_0_max__ = (logical_gt(dist, 2) ? 1 : 0 );
        for (size_t i_0__ = 0; i_0__ < dispersion_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, dispersion[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable dispersion: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 67;
        if (!(context__.contains_r("beta0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta0");
        pos__ = 0U;
        validate_non_negative_index("beta0", "p", p);
        context__.validate_dims("parameter initialization", "beta0", "vector_d", context__.to_vec(p));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta0(p);
        size_t beta0_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < beta0_j_1_max__; ++j_1__) {
            beta0(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta0: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 68;
        if (!(context__.contains_r("dispersion0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable dispersion0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("dispersion0");
        pos__ = 0U;
        validate_non_negative_index("dispersion0", "(logical_gt(dist, 2) ? 1 : 0 )", (logical_gt(dist, 2) ? 1 : 0 ));
        context__.validate_dims("parameter initialization", "dispersion0", "double", context__.to_vec((logical_gt(dist, 2) ? 1 : 0 )));
        std::vector<double> dispersion0((logical_gt(dist, 2) ? 1 : 0 ), double(0));
        size_t dispersion0_k_0_max__ = (logical_gt(dist, 2) ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < dispersion0_k_0_max__; ++k_0__) {
            dispersion0[k_0__] = vals_r__[pos__++];
        }
        size_t dispersion0_i_0_max__ = (logical_gt(dist, 2) ? 1 : 0 );
        for (size_t i_0__ = 0; i_0__ < dispersion0_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, dispersion0[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable dispersion0: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 65;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta;
            (void) beta;  // dummy to suppress unused var warning
            if (jacobian__)
                beta = in__.vector_constrain(p, lp__);
            else
                beta = in__.vector_constrain(p);
            current_statement_begin__ = 66;
            std::vector<local_scalar_t__> dispersion;
            size_t dispersion_d_0_max__ = (logical_gt(dist, 2) ? 1 : 0 );
            dispersion.reserve(dispersion_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < dispersion_d_0_max__; ++d_0__) {
                if (jacobian__)
                    dispersion.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    dispersion.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 67;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta0;
            (void) beta0;  // dummy to suppress unused var warning
            if (jacobian__)
                beta0 = in__.vector_constrain(p, lp__);
            else
                beta0 = in__.vector_constrain(p);
            current_statement_begin__ = 68;
            std::vector<local_scalar_t__> dispersion0;
            size_t dispersion0_d_0_max__ = (logical_gt(dist, 2) ? 1 : 0 );
            dispersion0.reserve(dispersion0_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < dispersion0_d_0_max__; ++d_0__) {
                if (jacobian__)
                    dispersion0.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    dispersion0.push_back(in__.scalar_lb_constrain(0));
            }
            // model body
            current_statement_begin__ = 71;
            lp_accum__.add(multi_normal_log<propto__>(beta0, beta0_mean, beta0_cov));
            current_statement_begin__ = 72;
            lp_accum__.add(normal_log<propto__>(beta, beta0, comm_sd));
            current_statement_begin__ = 73;
            if (as_bool(logical_lte(dist, 2))) {
                current_statement_begin__ = 74;
                lp_accum__.add(glm_lp(y, beta, 1.0, X, dist, link, offset, lp__, lp_accum__, pstream__));
                current_statement_begin__ = 75;
                lp_accum__.add(glm_lp(y0, beta0, 1.0, X0, dist, link, offset0, lp__, lp_accum__, pstream__));
            } else {
                current_statement_begin__ = 78;
                lp_accum__.add(inv_gamma_log<propto__>(dispersion0, disp0_shape, disp0_scale));
                current_statement_begin__ = 79;
                lp_accum__.add(inv_gamma_log<propto__>(dispersion, disp_shape, disp_scale));
                current_statement_begin__ = 80;
                lp_accum__.add(glm_lp(y, beta, get_base1(dispersion, 1, "dispersion", 1), X, dist, link, offset, lp__, lp_accum__, pstream__));
                current_statement_begin__ = 81;
                lp_accum__.add(glm_lp(y0, beta0, get_base1(dispersion0, 1, "dispersion0", 1), X0, dist, link, offset0, lp__, lp_accum__, pstream__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta");
        names__.push_back("dispersion");
        names__.push_back("beta0");
        names__.push_back("dispersion0");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(p);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_gt(dist, 2) ? 1 : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(p);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_gt(dist, 2) ? 1 : 0 ));
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_glm_commensurate_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta = in__.vector_constrain(p);
        size_t beta_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            vars__.push_back(beta(j_1__));
        }
        std::vector<double> dispersion;
        size_t dispersion_d_0_max__ = (logical_gt(dist, 2) ? 1 : 0 );
        dispersion.reserve(dispersion_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < dispersion_d_0_max__; ++d_0__) {
            dispersion.push_back(in__.scalar_lb_constrain(0));
        }
        size_t dispersion_k_0_max__ = (logical_gt(dist, 2) ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < dispersion_k_0_max__; ++k_0__) {
            vars__.push_back(dispersion[k_0__]);
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta0 = in__.vector_constrain(p);
        size_t beta0_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < beta0_j_1_max__; ++j_1__) {
            vars__.push_back(beta0(j_1__));
        }
        std::vector<double> dispersion0;
        size_t dispersion0_d_0_max__ = (logical_gt(dist, 2) ? 1 : 0 );
        dispersion0.reserve(dispersion0_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < dispersion0_d_0_max__; ++d_0__) {
            dispersion0.push_back(in__.scalar_lb_constrain(0));
        }
        size_t dispersion0_k_0_max__ = (logical_gt(dist, 2) ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < dispersion0_k_0_max__; ++k_0__) {
            vars__.push_back(dispersion0[k_0__]);
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_glm_commensurate";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t dispersion_k_0_max__ = (logical_gt(dist, 2) ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < dispersion_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "dispersion" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta0_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < beta0_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta0" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t dispersion0_k_0_max__ = (logical_gt(dist, 2) ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < dispersion0_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "dispersion0" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t dispersion_k_0_max__ = (logical_gt(dist, 2) ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < dispersion_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "dispersion" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta0_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < beta0_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta0" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t dispersion0_k_0_max__ = (logical_gt(dist, 2) ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < dispersion0_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "dispersion0" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_glm_commensurate_namespace::model_glm_commensurate stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
